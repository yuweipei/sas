{
  "_args": [
    [
      {
        "raw": "tap@>=0.2.3",
        "scope": null,
        "escapedName": "tap",
        "name": "tap",
        "rawSpec": ">=0.2.3",
        "spec": ">=0.2.3",
        "type": "range"
      },
      "/Users/yuweipei/git/screeps/node_modules/nodeunit"
    ]
  ],
  "_from": "tap@>=0.2.3",
  "_id": "tap@10.3.2",
  "_inCache": true,
  "_location": "/tap",
  "_nodeVersion": "8.0.0-pre",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/tap-10.3.2.tgz_1491720320295_0.20640921662561595"
  },
  "_npmUser": {
    "name": "isaacs",
    "email": "i@izs.me"
  },
  "_npmVersion": "4.5.0",
  "_phantomChildren": {
    "brace-expansion": "1.1.7",
    "buffer-shims": "1.0.0",
    "core-util-is": "1.0.2",
    "fs.realpath": "1.0.0",
    "inflight": "1.0.6",
    "inherits": "2.0.3",
    "once": "1.4.0",
    "path-is-absolute": "1.0.1",
    "process-nextick-args": "1.0.7",
    "sprintf-js": "1.0.3",
    "util-deprecate": "1.0.2"
  },
  "_requested": {
    "raw": "tap@>=0.2.3",
    "scope": null,
    "escapedName": "tap",
    "name": "tap",
    "rawSpec": ">=0.2.3",
    "spec": ">=0.2.3",
    "type": "range"
  },
  "_requiredBy": [
    "/nodeunit"
  ],
  "_resolved": "https://registry.npmjs.org/tap/-/tap-10.3.2.tgz",
  "_shasum": "77982f08368d8b1803a3b0ab5fc300e1817f31e7",
  "_shrinkwrap": null,
  "_spec": "tap@>=0.2.3",
  "_where": "/Users/yuweipei/git/screeps/node_modules/nodeunit",
  "author": {
    "name": "Isaac Z. Schlueter",
    "email": "i@izs.me",
    "url": "http://blog.izs.me"
  },
  "bin": {
    "tap": "bin/run.js"
  },
  "bugs": {
    "url": "https://github.com/tapjs/node-tap/issues"
  },
  "config": {
    "nyc": {
      "exclude": [
        "node_modules/**",
        "test/**"
      ]
    }
  },
  "dependencies": {
    "bind-obj-methods": "^1.0.0",
    "bluebird": "^3.3.1",
    "clean-yaml-object": "^0.1.0",
    "color-support": "^1.1.0",
    "coveralls": "^2.11.2",
    "deeper": "^2.1.0",
    "foreground-child": "^1.3.3",
    "fs-exists-cached": "^1.0.0",
    "function-loop": "^1.0.1",
    "glob": "^7.0.0",
    "isexe": "^1.0.0",
    "js-yaml": "^3.3.1",
    "nyc": "^10.0.0",
    "only-shallow": "^1.0.2",
    "opener": "^1.4.1",
    "os-homedir": "1.0.1",
    "own-or": "^1.0.0",
    "own-or-env": "^1.0.0",
    "readable-stream": "^2.0.2",
    "signal-exit": "^3.0.0",
    "source-map-support": "^0.4.3",
    "stack-utils": "^1.0.0",
    "tap-mocha-reporter": "^3.0.1",
    "tap-parser": "^5.3.1",
    "tmatch": "^3.0.0",
    "trivial-deferred": "^1.0.1",
    "yapool": "^1.0.0"
  },
  "description": "A Test-Anything-Protocol library",
  "devDependencies": {
    "mkdirp": "^0.5.1",
    "rimraf": "^2.5.4",
    "standard": "^7.1.0",
    "which": "^1.1.1"
  },
  "directories": {},
  "dist": {
    "shasum": "77982f08368d8b1803a3b0ab5fc300e1817f31e7",
    "tarball": "https://registry.npmjs.org/tap/-/tap-10.3.2.tgz"
  },
  "engines": {
    "node": ">=0.8"
  },
  "files": [
    "bin/*",
    "lib/*"
  ],
  "gitHead": "fa3da919ec08dd4b88655f6089b2873f77b745c7",
  "homepage": "http://node-tap.org/",
  "keywords": [
    "assert",
    "test",
    "tap"
  ],
  "license": "ISC",
  "main": "lib/tap.js",
  "maintainers": [
    {
      "name": "isaacs",
      "email": "i@izs.me"
    }
  ],
  "name": "tap",
  "optionalDependencies": {},
  "readme": "# node-tap\n\nA <abbr title=\"Test Anything Protocol\">TAP</abbr> test framework for\nNode.js.\n\n[![Build Status](https://travis-ci.org/tapjs/node-tap.svg?branch=master)](https://travis-ci.org/tapjs/node-tap) [![Build Status](https://ci.appveyor.com/api/projects/status/913p1ypf21gf4leu?svg=true)](https://ci.appveyor.com/project/isaacs/node-tap) [![Coverage Status](https://coveralls.io/repos/tapjs/node-tap/badge.svg?branch=master&service=github)](https://coveralls.io/github/tapjs/node-tap?branch=master)\n\n_Just wanna see some code? [Get started!](http://www.node-tap.org/basics/)_\n\nIt includes a command line test runner for consuming TAP-generating\ntest scripts, and a JavaScript framework for writing such scripts.\n\n* [Getting started guide](http://www.node-tap.org/basics/)\n* Built-in [test coverage](http://www.node-tap.org/coverage/)\n* Many [reporter formats](http://www.node-tap.org/reporting/)\n* Extensive [API](http://www.node-tap.org/api/) featuring:\n  * Great [promise support](http://www.node-tap.org/promises/)\n  * Comprehensive [assert library](http://www.node-tap.org/asserts/)\n  * Other [advanced stuff](http://www.node-tap.org/advanced/)\n  * Mocha-like [BDD DSL](http://www.node-tap.org/mochalike/)\n  * [Parallel Testing](http://www.node-tap.org/parallel/)\n* [Command-line interface](http://www.node-tap.org/cli/) for running\n  tests (whether they use node-tap or not)\n\nSee [the changelog](http://www.node-tap.org/changelog/) for recent updates, or just get\nstarted with [the basics](http://www.node-tap.org/basics/).\n\nAll this is too much to manage in a single README file, so head over\nto [the website](http://www.node-tap.org/) to learn more.\n\n## Why TAP?\n\nWhy should you use this thing!?  **LET ME TELL YOU!**\n\nJust kidding.\n\nMost frameworks spend a lot of their documentation telling you why\nthey're the greatest.  I'm not going to do that.\n\n### <i lang=\"it\">tutti i gusti, sono gusti</i>\n\nSoftware testing is a software and user experience design challenge\nthat balances on the intersection of many conflicting demands.\n\nNode-tap is based on [my](http://izs.me) opinions about how a test\nframework should work, and what it should let you do.  I do _not_ have\nany opinion about whether or not you share those opinions.  If you do\nshare them, you will probably enjoy this test library.\n\n1. **Test files should be \"normal\" programs that can be run\n   directly.**\n\n   That means that it can't require a special runner that\n   puts magic functions into a global space.  `node test.js` is a\n   perfectly ok way to run a test, and it ought to function\n   exactly the same as when it's run by the fancy runner with\n   reporting and such.  JavaScript tests should be JavaScript\n   programs; not english-language poems with weird punctuation.\n\n2. **Test output should be connected to the structure of the\n   test file that is easy to determine.**\n\n   That means not unnecessarily deferring test functions\n   until `nextTick`, because that would shift the order of\n   `console.log` output.  Synchronous tests should be synchronous.\n\n3. **Test files should be run in separate processes.**\n\n   That means that it can't use `require()` to load test files.  Doing\n   `node ./test.js` must be the exact same sort of environment for the\n   test as doing `test-runner ./test.js`.  Doing `node test/1.js; node\n   test/2.js` should be equivalent (from the test's point of view) to\n   doing `test-runner test/*.js`.  This prevents tests from becoming\n   implicitly dependent on one anothers' globals.\n\n4. **Assertions should not normally throw (but throws MUST be handled\n   nicely).**\n\n   I frequently write programs that have many hundreds of\n   assertions based on some list of test cases.  If the first failure\n   throws, then I don't know if I've failed 100 tests or 1, without\n   wrapping everything in a try-catch.  Furthermore, I usually want to\n   see some kind of output or reporting to verify that each one\n   actually ran.\n\n   Basically, it should be your decision whether you want to throw or\n   not.  The test framework shouldn't force that on you, and should\n   make either case easy.\n\n5. **Test reporting should be separate from the test process, included\n   in the framework, and enabled by default for humans.**\n\n   The [raw test output](http://www.node-tap.org/tap-format/) should\n   be machine-parseable and human-intelligible, and a separate process\n   should consume test output and turn it into a [pretty summarized\n   report](http://www.node-tap.org/reporting/).  This means that test\n   data can be stored and parsed later, dug into for additional\n   details, and so on.  Also: nyan cat.\n\n6. **Writing tests should be easy, maybe even fun.**\n\n   The lower the barrier to entry for writing new tests, the more\n   tests get written.  That means that there should be a relatively\n   small vocabulary of actions that I need to remember as a test\n   author.  There is no benefit to having a distinction between a\n   \"suite\" and a \"subtest\".  Fancy DSLs are pretty, but more to\n   remember.\n\n   That being said, if the you returns a Promise, or use a DSL that\n   throws a decorated error, then the test framework should Just Work\n   in a way that helps a human being understand the situation.\n\n7. **Tests should output enough data to diagnose a failure, and no\n   more or less.**\n\n   Stack traces pointing at JS internals or the guts of the test\n   framework itself are not helpful.  A test framework is a serious UX\n   challenge, and should be treated with care.\n\n8. **Test coverage should be included.**\n\n   Running tests with coverage changes the way that you think about\n   your programs, and provides much deeper insight.  Node-tap bundles\n   [nyc](https://istanbul.js.org/) for this.\n\n   It's not enabled by default only because it _does_ necessarily\n   change the nature of the environment a little bit.  But I strongly\n   encourage [enabling coverage](http://www.node-tap.org/coverage/).\n\n9. **Tests should be output in a predictable order.**\n\n   Even if they are run in parallel, the test _output_ should be\n   consistent.\n\n   As of version 10, tap supports [parallel\n   tests](http://www.node-tap.org/parallel/), which\n   can make your tests run significantly faster if they are I/O bound\n   or if you have multiple cores on your machine.  However, even when\n   run in parallel, the output is still serialized.\n\n10. **Tests should not require more building than your code.**\n\n    Babel and Webpack are lovely and fine.  But if your code doesn't\n    require compilation, then I think your tests shouldn't either.\n    Tap is extremely\n    [promise-aware](http://www.node-tap.org/promises/), but works on\n    any version of Node.js back to v0.10.\n\nSoftware testing should help you build software.  It should be a\nsecurity blanket and a quality ratchet, giving you the support to\nundertake massive refactoring and fix bugs without worrying.  It\nshouldn't be a purification rite or a hazing ritual.\n\nThere are many opinions left off of this list!  Reasonable people can\ndisagree.  But if you find yourself nodding along, [maybe tap is for\nyou](http://www.node-tap.org/basics/).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/tapjs/node-tap.git"
  },
  "scripts": {
    "postpublish": "git push origin --all; git push origin --tags",
    "posttest": "standard lib test",
    "postversion": "npm publish",
    "preversion": "npm test",
    "regen-fixtures": "node scripts/generate-test-test.js test/test/*.js",
    "smoke": "node bin/run.js --node-arg=test/test.js test/test/*.js -j2",
    "t": "node bin/run.js test/*.* -sfails.txt",
    "test": "node bin/run.js test/*.* --coverage -t3600 -sfails"
  },
  "version": "10.3.2"
}
